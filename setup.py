import os
from setuptools import setup, find_packages
from setuptools.command.install import install as _install

# Setup version
VERSION = '2.2.0.dev'

# Read description
with open('README.rst', 'r') as readme:
    README_TEXT = readme.read()


def write_version_py():
    filename = os.path.join(
        os.path.dirname(__file__),
        'remoteappmanager',
        'version.py')
    ver = "__version__ = '{}'\n"
    with open(filename, 'w') as fh:
        fh.write("# Autogenerated by setup.py\n")
        fh.write(ver.format(VERSION))


write_version_py()

with open('requirements.txt', 'r') as REQUIREMENTS:
    requirements = [
        line for line in REQUIREMENTS.readlines() if not line.startswith('#')
    ]

# Unfortunately RTD cannot install jupyterhub because jupyterhub needs bower,
# and that is not available. We prevent the request for the unreleased jhub
# by skipping it if we are on RTD
# We also have problems with requests as docker-py wants <2.11 and RTD
# provides 2.11.1

on_rtd = os.environ.get('READTHEDOCS') == 'True'
if on_rtd:
    # These are the dependencies of jupyterhub that we need to have in order
    # for our code to import on RTD.
    requirements.extend([
        "sqlalchemy>=1.0",
        # Pinning jinja2 requirements when building on RTD due to
        # regression when using old versions of sphinx<2
        # https://github.com/readthedocs/readthedocs.org/issues/9037
        "jinja2<3.1.0",
    ])
else:
    requirements.extend([
        "jinja>=2.8",
        # Pinned to jupyterhub 0.8.0.dev0 due to issues with spawners (fails with 0.8.0)
        "jupyterhub @ git+http://github.com/jupyterhub/jupyterhub.git@2d1a45f0190059ef436c2f97dc8d6e391eb2d139#egg=jupyterhub",
    ])


class install(_install):
    def run(self):
        if not on_rtd:
            import subprocess
            subprocess.check_call(['npm', 'run', 'build'])
        super().run()


# main setup configuration class
setup(
    name='remoteappmanager',
    version=VERSION,
    author='SimPhoNy Project',
    description='Remote application manager sub-executable',
    long_description=README_TEXT,
    install_requires=requirements,
    packages=find_packages(exclude=["selenium_tests"]),
    include_package_data=True,
    entry_points={
        'console_scripts': [
            "remoteappmanager = " +
                "remoteappmanager.cli.remoteappmanager.__main__:main",
            "remoteappadmin = " +
                "remoteappmanager.cli.remoteappadmin.__main__:main",
            "remoteappdb = remoteappmanager.cli.remoteappdb.__main__:main",
            "remoteapprest = remoteappmanager.cli.remoteapprest.__main__:main"
            ]
        },
    cmdclass={'install': install}
    )
